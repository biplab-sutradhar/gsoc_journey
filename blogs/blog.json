[
  {
    "id": 1,
    "title": "From RSelenium to Chromote: Modernizing Animint2’s Shiny Test Stack",
    "date": "August 10, 2025",
    "description": "A deep dive into migrating browser automation tests in animint2, highlighting challenges, solutions, and lessons learned during GSoC.",
    "content": "Hey everyone! As part of my GSoC 2025 project with animint2, I've been working on improving the testing infrastructure. One of the key tasks was migrating our tests from RSelenium to Chromote in PR #209. This wasn't just a simple swap; it involved refactoring code, handling edge cases, and ensuring everything integrated smoothly with Shiny and RMarkdown. Let me walk you through the journey.\n\n### The Problem with RSelenium\nRSelenium has been a staple for browser automation in R, but it comes with baggage. It's often flaky, requires a separate Selenium server, and can lead to silent failures—especially in CI environments. In animint2, we use it for testing interactive visualizations in Shiny apps (like the WorldBank example) and RMarkdown documents. With headless testing needs growing, it was time for an upgrade.\n\n### Why Chromote?\nChromote is a lightweight R package that interfaces directly with headless Chrome via the DevTools protocol. It's faster, doesn't need external servers, and aligns with modern tools like shinytest2. For animint2, this meant better stability for testing plot rendering, selector interactions, and app functionality without the overhead.\n\n### Migration Steps\nI started by inventorying the tests: examples/shiny, shiny-WorldBank, and RMarkdown visualizations (closing #143). The goal was to cover all without regressions.\n\n1. **Helper Functions and App Startup**: I created helpers like start_shiny_app() and start_rmd_app() to spin up servers on fixed ports (e.g., 3147) to avoid random port warnings. Used callr for background processes to keep things non-blocking.\n\n2. **Integrating with Chromote**: Instead of new sessions per test, I reused a single ChromoteSession via tests_init() and tests_run(). This simplified navigation to app URLs and reduced overhead.\n\n3. **CI Workflow Updates**: Added 'shiny' to the test matrix in tests.yaml, ensuring tests run seamlessly. Fixed issues like 'localhost cannot be opened' by probing with socketConnection and timeouts.\n\n### Challenges Faced\n- **Flaky Warnings**: Initial random ports caused CI warnings; switching to fixed ones resolved it.\n- **Reviewer Feedback**: Thanks to tdhock and suhaani-agarwal for spotting deps like callr (added to Suggests) and avoiding extras like this.path.\n- **Edge Cases**: Handled redundant functions post-migration and integrated with existing renderer/compiler tests.\n\n### Results and Takeaways\nThe suite now runs greener and faster, with better error reporting. Key lesson: Reuse sessions and fixed ports for stability. If you're migrating, start with shinytest2 for high-level needs, but raw Chromote shines for custom control.\n\nCheck out the full PR: [https://github.com/animint/animint2/pull/209](https://github.com/animint/animint2/pull/209). What's your experience with R testing tools? Drop a comment!"
  },
  {
    "id": 2,
    "title": "Removing geom_raster: Streamlining Robustness in Animint2",
    "date": "August 10, 2025",
    "description": "How I fixed a silent failure bug in animint2 by removing geom_raster and improving error handling during GSoC.",
    "content": "What's up, folks? In my GSoC work on animint2, one early win was tackling a pesky bug in geom_raster via PR #204 (now merged!). This geom was causing silent failures that disrupted plot rendering, so I removed it entirely and guided users to geom_tile. Here's the full story, from diagnosis to deployment.\n\n### The Issue with geom_raster\nGeom_raster is meant for efficient rasterized plots, but in animint2, it often failed silently—crashing layered visualizations without clues. This tied into issues like #53, where robustness was key for interactive plots. During Week 1, I noticed it while working on theme_animint layouts.\n\n### Solution Approach\nInstead of patching, we decided on removal for a cleaner codebase. Users get a clear error: 'geom_raster is not supported in animint2. Please use geom_tile instead.'\n\n1. **Code Cleanup**: Removed the GeomRaster class, draw_panel functions, and related exports. Updated roxygen docs to avoid undefined export errors in CI.\n\n2. **Documentation Updates**: Swapped examples in geom_tile.r (e.g., faithfuld dataset) and removed outdated comments about performance.\n\n3. **Testing**: Added tests for error throwing and excluded raster from arg default checks. Ensured no regressions in compiler functions.\n\n### Challenges and Iterations\n- **CI Hiccups**: Fixed errors like 'undefined exports: GeomRaster' by regenerating NAMESPACE and bumping version to 2025.6.28.\n- **Reviewer Insights**: tdhock's feedback led to full code removal (no comments) and doc refinements. Handled annotation_raster cleanup too.\n- **Edge Cases**: Verified swaps in density plots and guides didn't break anything.\n\n### Impact and Learnings\nThis makes animint2 more reliable—no more crashes without warnings. It complemented my layout work (e.g., rowspan/colspan in #139). Lesson: Sometimes removal is the best fix; always test thoroughly.\n\nFull PR details: [https://github.com/animint/animint2/pull/204](https://github.com/animint/animint2/pull/204). Have you dealt with similar geom bugs in ggplot2 extensions? Let's discuss!"
  }
]
