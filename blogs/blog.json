[
  {
    "id": 1,
    "title": "From RSelenium to Chromote: Modernizing Animint2’s Shiny Test Stack",
    "date": "August 10, 2025",
    "description": "A deep dive into migrating browser automation tests in animint2, highlighting challenges, solutions, and lessons learned during GSoC.",
    "content": "Hey everyone! As part of my GSoC 2025 project with animint2, I've been working on improving the testing infrastructure. One of the key tasks was migrating our tests from RSelenium to Chromote in PR #209. This wasn't just a simple swap; it involved refactoring code, handling edge cases, and ensuring everything integrated smoothly with Shiny and RMarkdown. Let me walk you through the journey.\n\n### The Problem with RSelenium\nRSelenium has been a staple for browser automation in R, but it comes with baggage. It's often flaky, requires a separate Selenium server, and can lead to silent failures—especially in CI environments. In animint2, we use it for testing interactive visualizations in Shiny apps (like the WorldBank example) and RMarkdown documents. With headless testing needs growing, it was time for an upgrade.\n\n### Why Chromote?\nChromote is a lightweight R package that interfaces directly with headless Chrome via the DevTools protocol. It's faster, doesn't need external servers, and aligns with modern tools like shinytest2. For animint2, this meant better stability for testing plot rendering, selector interactions, and app functionality without the overhead.\n\n### Migration Steps\nI started by inventorying the tests: examples/shiny, shiny-WorldBank, and RMarkdown visualizations (closing #143). The goal was to cover all without regressions.\n\n1. **Helper Functions and App Startup**: I created helpers like start_shiny_app() and start_rmd_app() to spin up servers on fixed ports (e.g., 3147) to avoid random port warnings. Used callr for background processes to keep things non-blocking.\n\n2. **Integrating with Chromote**: Instead of new sessions per test, I reused a single ChromoteSession via tests_init() and tests_run(). This simplified navigation to app URLs and reduced overhead.\n\n3. **CI Workflow Updates**: Added 'shiny' to the test matrix in tests.yaml, ensuring tests run seamlessly. Fixed issues like 'localhost cannot be opened' by probing with socketConnection and timeouts.\n\n### Challenges Faced\n- **Flaky Warnings**: Initial random ports caused CI warnings; switching to fixed ones resolved it.\n- **Edge Cases**: Handled redundant functions post-migration and integrated with existing renderer/compiler tests.\n\n### Results and Takeaways\nThe suite now runs greener and faster, with better error reporting. Key lesson: Reuse sessions and fixed ports for stability. If you're migrating, start with shinytest2 for high-level needs, but raw Chromote shines for custom control.\n\nCheck out the full PR: [https://github.com/animint/animint2/pull/209](https://github.com/animint/animint2/pull/209). What's your experience with R testing tools? Drop a comment!"
  }
  
]
